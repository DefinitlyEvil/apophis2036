#include "VertexFormats.cg"

#include "PerlinNoise.cg"

float4 main(v2f IN,  uniform float4 ambientLightColor, uniform sampler1D permutationMap : TEXUNIT0, uniform sampler1D gradientMap : TEXUNIT1, uniform sampler1D lavaGradient : TEXUNIT2, uniform sampler1D lavaToRockControl : TEXUNIT3, uniform sampler2D outerMap : TEXUNIT4, uniform float4x4 coreOuterTextureMatrix, uniform float4x4 perlinNoiseTextureMatrix, uniform float currentTime) : COLOR
{		
	//Compute the distance from the centre of the earth, of a scale of 0.0 - 1.0.
	float3 toCentre = float3(256.0f, 256.0f, 256.0f) - IN.TexCoords.xyz;
	float distance = length(toCentre) / 256.0f;
	
	//Compute the texture coordinates.
	float4 coreOuterTexCoords = mul(coreOuterTextureMatrix, IN.TexCoords);
	float4 perlinNoiseTexCoords = mul(perlinNoiseTextureMatrix, IN.TexCoords);

	//Makes the normal components sum to 1 (for triplanar texturing).
	IN.Normal *= IN.Normal;
	
	//Retrieve the 3 samples for the rock.
	float3 outerValueXY = tex2D(outerMap, coreOuterTexCoords.xy).rgb * abs(IN.Normal.z);
	float3 outerValueYZ = tex2D(outerMap, coreOuterTexCoords.yz).rgb * abs(IN.Normal.x);
	float3 outerValueXZ = tex2D(outerMap, coreOuterTexCoords.xz).rgb * abs(IN.Normal.y);	
	float3 outerValue = outerValueXY + outerValueYZ + outerValueXZ;	
	
	//Each octave can be up to 1.0, so in theory the sum can be much greater. In practice the sum rarely goes above 1.0.
	float noiseValue = abs(perlinNoise4d(float4(perlinNoiseTexCoords.xyz  , currentTime), permutationMap, gradientMap)); //Weights sum to 1
	noiseValue += abs(perlinNoise4d(float4(perlinNoiseTexCoords.xyz * 1.97, currentTime), permutationMap, gradientMap)) * 0.5;
	noiseValue += abs(perlinNoise4d(float4(perlinNoiseTexCoords.xyz * 4.02, currentTime), permutationMap, gradientMap)) * 0.25;
	noiseValue += abs(perlinNoise4d(float4(perlinNoiseTexCoords.xyz * 7.95, currentTime), permutationMap, gradientMap)) * 0.125;
	
	//Map the noise strength to a colour.
	float3 innerValue = tex1D(lavaGradient, noiseValue);	
		
	//A high value for rockStrength means we show rock rather than lava.
	float rockStrength = tex1D(lavaToRockControl, distance);
	
	//If we just interpolate using rock strength we will gt a smooth fade from lava to rock.
	//However, it is nicer if the hot areas disappear first so we see areas of slight lava amoung
	//the rock. The addition of noiseValue achieves this, and the 0.5 just seemed to help.
	float interpolationVal = min(1.0, (noiseValue * 0.5) + rockStrength) ;
	
	//Blend between lava and rock.
	float4 colourMapValue = float4(lerp(innerValue, outerValue, interpolationVal), 1.0);
		
	//Apply lighting.
	colourMapValue *= IN.DiffuseLightColor + ambientLightColor;
	
	//Return result.
	return colourMapValue;
}